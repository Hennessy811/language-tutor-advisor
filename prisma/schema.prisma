// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  access_token       String?
  expires_at         BigInt?
  oauth_token        String?
  oauth_token_secret String?
  provider           String
  providerAccountId  String
  refresh_token      String?
  scope              String?
  token_type         String?
  type               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
  role          String?        @default("user")
  createdAt     DateTime?      @default(now())
  savedStudents SavedStudent[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SavedStudent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  name           String
  age            Int
  language       String
  level          String
  bio            String
  openAiMessages OpenAiMessage[]
  ratedLines     RatedLine[]
}

model OpenAiMessage {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  studentId String
  student   SavedStudent @relation(fields: [studentId], references: [id], onDelete: Cascade)

  prompt String
  reply  String
}

model RatedLine {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  studentId String
  student   SavedStudent @relation(fields: [studentId], references: [id], onDelete: Cascade)

  line       String  @unique
  markedGood Boolean
}
